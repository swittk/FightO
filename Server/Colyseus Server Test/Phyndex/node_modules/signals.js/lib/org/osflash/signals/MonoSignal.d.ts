import { ISignal } from "./ISignal";
import { Slot } from "./Slot";
import { ISlot } from "./ISlot";
/**
 * Allows the valueClasses to be set in MXML, e.g.
 * <signals:Signal id="nameChanged">{[String, uint]}</signals:Signal>
 */
/**
 * A MonoSignal can have only one listener.
 */
export declare class MonoSignal implements ISignal {
    protected _valueClasses: any[];
    protected slot: Slot;
    /**
     * Creates a MonoSignal instance to dispatch value objects.
     * @param    valueClasses Any number of class references that enable type checks in dispatch().
     * For example, new Signal(String, uint)
     * would allow: signal.dispatch("the Answer", 42)
     * but not: signal.dispatch(true, 42.5)
     * nor: signal.dispatch()
     *
     * NOTE: Subclasses cannot call super.apply(null, valueClasses),
     * but this constructor has logic to support super(valueClasses).
     */
    constructor(...valueClasses: any[]);
    /**
     * @inheritDoc
     * @throws ArgumentError <code>ArgumentError</code>: Invalid valueClasses argument: item at index should be a Class but was not.
     */
    valueClasses: any[];
    /** @inheritDoc */
    readonly numListeners: number;
    /**
     * @inheritDoc
     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot add or addOnce with a listener already added, remove the current listener first.
     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
     */
    add(listener: Function): ISlot;
    /**
     * @inheritDoc
     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot add or addOnce with a listener already added, remove the current listener first.
     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
     */
    addOnce(listener: Function): ISlot;
    /** @inheritDoc */
    remove(listener: Function): ISlot;
    /** @inheritDoc */
    removeAll(): void;
    /**
     * @inheritDoc
     * @throws ArgumentError <code>ArgumentError</code>: Incorrect number of arguments.
     * @throws ArgumentError <code>ArgumentError</code>: Value object is not an instance of the appropriate valueClasses Class.
     */
    dispatch(...valueObjects: any[]): void;
    protected registerListener(listener: Function, once?: boolean): ISlot;
}
