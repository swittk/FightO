import { Signal } from "./Signal";
import { IPrioritySignal } from "./IPrioritySignal";
import { ISlot } from "./ISlot";
export declare class PrioritySignal extends Signal implements IPrioritySignal {
    constructor(...valueClasses: any[]);
    /**
     * @inheritDoc
     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
     */
    addWithPriority(listener: Function, priority?: number): ISlot;
    /**
     * @inheritDoc
     * @throws flash.errors.IllegalOperationError <code>IllegalOperationError</code>: You cannot addOnce() then add() the same listener without removing the relationship first.
     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
     */
    addOnceWithPriority(listener: Function, priority?: number): ISlot;
    protected registerListener(listener: Function, once?: boolean): ISlot;
    protected registerListenerWithPriority(listener: Function, once?: boolean, priority?: number): ISlot;
}
