import { ISlot } from "./ISlot";
import { IOnceSignal } from "./IOnceSignal";
/**
 * The Slot class represents a signal slot.
 *
 * @author Robert Penner
 * @author Joa Ebert
 */
export declare class Slot implements ISlot {
    protected _signal: IOnceSignal;
    protected _enabled: boolean;
    protected _listener: Function;
    protected _once: boolean;
    protected _priority: number;
    protected _params: any[];
    /**
     * Creates and returns a new Slot object.
     *
     * @param listener The listener associated with the slot.
     * @param signal The signal associated with the slot.
     * @param once Whether or not the listener should be executed only once.
     * @param priority The priority of the slot.
     *
     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>.
     * @throws Error <code>Error</code>: Internal signal reference has not been set yet.
     */
    constructor(listener: Function, signal: IOnceSignal, once?: boolean, priority?: number);
    /**
     * @inheritDoc
     */
    execute0(): void;
    /**
     * @inheritDoc
     */
    execute1(value: Object): void;
    /**
     * @inheritDoc
     */
    execute(valueObjects: any[]): void;
    /**
     * @inheritDoc
     * @throws ArgumentError <code>ArgumentError</code>: Given listener is <code>null</code>. Did you want to set enabled to false instead?
     * @throws Error <code>Error</code>: Internal signal reference has not been set yet.
     */
    listener: Function;
    /**
     * @inheritDoc
     */
    readonly once: boolean;
    /**
     * @inheritDoc
     */
    readonly priority: number;
    /**
     * Creates and returns the string representation of the current object.
     *
     * @return The string representation of the current object.
     */
    toString(): string;
    /**
     * @inheritDoc
     */
    enabled: boolean;
    /**
     * @inheritDoc
     */
    params: any[];
    /**
     * @inheritDoc
     */
    remove(): void;
    protected verifyListener(listener: Function): void;
}
